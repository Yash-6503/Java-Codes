Solving MCQs based on Generics Topic of Collections Framework
----------------------------------------------------------------------------------------

1.What is the output of the following code?
class NareshIT<T>
{
	private T test;
	
	public void set(T test)
	{
		this.test = test;
	}
	public T get()
	 {
		 return test;
	 }
}
public class GenericTest 
{
  public static void main(String[] args) 
  {
     NareshIT<Integer> nit = new NareshIT();
		nit.set(10);
		System.out.println(nit.get());
   }
}

Answer:
10
--------------------------------------------------------------------------------------

2.What is the output of the following code?
public class GenericTest 
{
  public static void main(String[] args) 
  {	
	ArrayList al = new ArrayList<>();
		  
	al.add("Naresh"); 
	al.add("I");
	al.add("Technologies");
	String name = al.get(1);
	System.out.println(name);
   }
}

Answer:
 error: incompatible types: Object cannot be converted to String
--------------------------------------------------------------------------------------

3.What is the output of the following code?
public class GenericTest {
	public static void main(String[] args) {				
		  ArrayList<String> al = new ArrayList<String>();		  
		  al.add("Naresh"); 
		  al.add("I");
		  al.add("Technologies");
		  String name = al.get(1);
		  System.out.println(name);	
	}
}

Answer:
I
-------------------------------------------------------------------------------------

4.Explain the output of the following code?
class Test<R,A>
{
	private R r;
	public void set(A a) 
	{
		r = a;
	}
	
	public R get() 
	{
		return r;
	}
}
public class GenericTest 
{
   public static void main(String[] args) 
   {
      Test<String,String> test = new Test(); 
      test.set("Info");
      System.out.println(test.get());
   }
}

Answer:
error: incompatible types: A cannot be converted to R
                r = a;
                    ^
  where A,R are type-variables:
    A extends Object declared in class Test1
    R extends Object declared in class Test1
-----------------------------------------------------------------------------

5.What is the output of the following code?
class NareshIT<R,A>
{
	private R r;
	public void set(A a) 
	{
		r = (R)a; // casting A to R 
	}
	
	public R get() 
	{
		return r;
	}
}
public class GenericTest {
	public static void main(String[] args) {		
		
		  NareshIT<String,String> test = new NareshIT(); 
		  test.set("NareshIT");
		  System.out.println(test.get()); 
	}
}

Answer:
NareshIT
-------------------------------------------------------------------------------

6.Is there any error in the below program?
class Test<R,A>
{
	private R r;
	private A a;
	public void set(A a, R r) //method 
	{
		this.a = a;
		this.r = r;
	}
	
	public String get() 
	{
		String str = a.toString()+r.toString();
		return str;
	}
}

public class GenericTest 
{
  public static void main(String[] args) 
  {

		  Test<String,String> test = new Test(); 
		  test.set("Naresh I ","Technologies");
		  System.out.println(test.get()); 
  }
}

Answer:
Naresh I Technologies
--------------------------------------------------------------------

7.Is there any error in the below program?
class Test<R,A>
{
	private R r;
	private A a;
	
	public void set(A a, R r) //method 
	{
		this.a = a;
		this.r = r;
	}
	
	public R get() 
	{
		r = a+r; 
		return r;
	}
}

public class GenericTest {
	public static void main(String[] args) {
		
		  Test<String,String> test = new Test(); 
		  test.set("Naresh I ","Technologies");
		  System.out.println(test.get());
	}
}

Answer:
error: bad operand types for binary operator '+'
                r = a+r; 
                     ^
  first type:  A
  second type: R
  where A,R are type-variables:
    A extends Object declared in class Test1
    R extends Object declared in class Test1
----------------------------------------------------------------------------

8.What is the output of the following program?
class NareshIT<K,V>
{
	private K key;
	private V value;
	//constructor
	public NareshIT(K key, V value) {
		this.key = key;
		this.value = value;
	}
	
	public K getKey() {
		return key;
	}
	public V getValue() {
		return value;
	}
}
public class GenericTest {
	public static void main(String[] args) {
		NareshIT<String,String> nit = new NareshIT("Naresh","IT");
		System.out.println(nit.getKey()+nit.getValue());
		NareshIT<Integer,String> integer = new NareshIT(1003, "Naresh"); 
		System.out.println(integer.getKey());	
	}
}

9.What is the output of the following code?
class NareshIT<T>
{
	private T test;
	
	public void set(T test)
	{
		this.test = test;
	}
	public T get()
	 {
		 return test;
	 }
}

public class GenericTest {
	public static void main(String[] args) {
		NareshIT<String> nit = new NareshIT();
		nit.set(new String("Naresh I Technologies"));
		String str = nit.get();
		System.out.println(str);
	}
}

Answer:
NareshIT
1003
--------------------------------------------------------------------------

10.What is the output of the following code?
class NareshIT<K extends Number ,V extends String>
{
	private K key;
	private V value;
		
	public void set(K key, V value) {
		this.key = key;
		this.value = value;
	}
	
	public K getKey() {
		return key;
	}
	public V getValue() {
		return value;
	}
}

public class GenericTest {
	public static void main(String[] args) {
		NareshIT<Integer, String> nit = new NareshIT();
		nit.set(9999, new String("Naresh I Technologies"));
		System.out.println(nit.getKey()+" "+nit.getValue());	
	}
}

Answer:
9999 Naresh I Technologies
--------------------------------------------------------------------------

11.Find the error in the following code?
class NareshIT<T extends Float>
{
	private T test;
	
	public void set(T test)
	{
		this.test = test;
	}
	
	public T get()
	 {
		 return test;
	 }
}
public class GenericTest {
	public static void main(String[] args) {
		NareshIT<Double> nit1 = new NareshIT();
		nit1.set(9999.0);
		System.out.println(nit1.get());
	}
}

Answer:
 error: type argument Double is not within bounds of type-variable T
                NareshIT<Double> nit1 = new NareshIT();
                         ^
  where T is a type-variable:
    T extends Float declared in class NareshIT
-------------------------------------------------------------------------------

12.What is the output of the following code?
interface NareshIT<T>
{
	void nit(T type);
}

class Test implements NareshIT
{
	public void nit(Object type) 
	{
		System.out.println(type);
	};
}

public class GenericTest{
	public static void main(String[] args) {
		Test test = new Test();
		test.nit("Naresh I technologies");
		test.nit(1.66);	
	}
}

Answer:
Naresh I technologies
1.66
---------------------------------------------------------------------------------------------

13.What is the output of the following code?
class NareshIt
{
	public void nit(List<?> list)
	{
		for (Object li : list) {
			System.out.print(li+" ");
		}
		System.out.println();
	}
}

public class GenericTest{
	public static void main(String[] args) {
				
		NareshIt str = new NareshIt();
		List<Integer> listInt = Arrays.asList(1001,252,36);
		List<String> liststr = Arrays.asList("Naresh","I","Technologies");
		
		str.nit(listInt);
		str.nit(liststr);
	}
}

Answer:
1001 252 36 
Naresh I Technologies 
----------------------------------------------------------------------------------

14.What is the output of the following code?
class StringTest implements NareshIT<String>
{

	@Override
	public void nit(String type) {
		System.out.println(type);
	}
	
}
public class GenericTest{
	public static void main(String[] args) {
		StringTest test = new StringTest();
		test.nit("Naresh I technologies");
		test.nit(1.66);
	}
}

Answer:
 error: cannot find symbol
class StringTest implements NareshIT<String>
                            ^
  symbol: class NareshIT
test.java:9: error: method does not override or implement a method from a supertype
        @Override

error: incompatible types: double cannot be converted to String
                test1.nit(1.66);
                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
---------------------------------------------------------------------------------------------------

15.What is the output of the following program?
class NareshIt<T>
{
	public void nit(NareshIt<?> it)
	{
		System.out.println(it);
	}
}

public class GenericTest{
	public static void main(String[] args) {		
		NareshIt<String> str = new NareshIt();
		str.nit("Naresh I Technologies");
	}
}

Answer:
 error: incompatible types: String cannot be converted to NareshIt<?>
                str.nit("Naresh I Technologies");
-------------------------------------------------------------------------------------

16.What is the output of the following code?
class NareshIT<T>
{
	
}
public class GenericTest{
	public static void main(String[] args) {	
		NareshIT<String> str = new NareshIT();
		NareshIT<Float> flo = new NareshIT();
		System.out.println(str.equals(flo));
	}
}

Answer:
false
-------------------------------------------------------------------------------------

17.What is the output of the following code?
class NareshIT<T>
{
	
}
public class GenericTest{
	public static void main(String[] args) {	
		NareshIT<String> str = new NareshIT();
		NareshIT<Float> flo = new NareshIT();
		System.out.println(str.getClass().equals(flo.getClass()));
	}
}

Answer:
true
--------------------------------------------------------------------------------------

18.What is the output of the following code?
public class GenericTest{
	public static void main(String[] args) {
		System.out.println(display(1));
		System.out.println(display("NareshIT"));
		System.out.println(display(3.25f));
		
	}
	public static<E> E display(E element)
	{
		E e = element;
		return e;
	}
}

Answer:
1
NareshIT
3.25
--------------------------------------------------------------------------------------

19.What is the output of the following code?
public class GenericTest{
	public static void main(String[] args) {
		System.out.println(display(1).getClass());
		System.out.println(display("NareshIT").getClass());
		System.out.println(display(3.25f).getClass());
	}
	public static<E> E display(E element)
	{
		E e = element;
		return e;
	}
}

Answer:
class java.lang.Integer
class java.lang.String
class java.lang.Float
---------------------------------------------------------------------------------------

20.What is the output of the following code?
class Fruit    
{
}

class Apple extends Fruit   
{
	@Override
	public String toString()
	{
		return "Apple";
	}
}

class Basket<E>      
{
	private E element;  	
	public void setElement(E element) 
	{
		this.element = element;
	}	

	public E getElement() 
	{
		return this.element;		
	}
}

public class Test16
{
	public static void main(String[] args) 
	{
		Basket<Fruit> b = new Basket<>();
		b.setElement(new Apple());

		Apple x = b.getElement();	
		System.out.println(x);
      		
	}
}

Answer:
error: incompatible types: Fruit cannot be converted to Apple
                Apple x = b.getElement();
-----------------------------------------------------------------------------------------