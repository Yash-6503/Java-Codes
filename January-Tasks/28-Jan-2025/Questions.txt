Question: Thread Priority and yield() Method

Scenario:
You need to understand how thread priority affects execution and how the yield() method works.

Task:

Create three classes HighPriorityThread, LowPriorityThread, and NormalPriorityThread, all extending Thread.
Set their priorities using setPriority(Thread.MAX_PRIORITY), setPriority(Thread.MIN_PRIORITY), and setPriority(Thread.NORM_PRIORITY) respectively.
In each thread’s run() method, print the thread name and current priority.
In the main method, start all three threads and observe the output.
Add a yield() statement in the run() method of NormalPriorityThread to observe its effect.
Key Concepts:

Understanding thread priorities and how they influence scheduling.
Learning how yield() temporarily pauses the current thread to allow others to execute.
Test Cases:

Test Case 1:

Input: Start HighPriorityThread, LowPriorityThread, and NormalPriorityThread.
Expected Output: The high-priority thread should generally run before the others, but exact behavior may vary due to the scheduler.
Test Case 2:

Input: Use yield() in the run() method of NormalPriorityThread.
Expected Output: The normal priority thread yields control, allowing other threads to execute.
Thread States and join() Method

-----------------------------------------------------------------------

Scenario:
You want to understand the life cycle of a thread, including how to wait for a thread to finish execution using the join() method.

Task:

Create two classes, ThreadA and ThreadB, both extending Thread.
In the run() method of ThreadA, print a message and make it sleep for 2 seconds using Thread.sleep(2000).
In ThreadB, print a message, and after starting ThreadA, call join() on it.
In the main method, start both ThreadA and ThreadB and observe the order of execution.
Key Concepts:

Understanding thread states (NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED).
Using join() to ensure one thread waits for another to complete.
Test Cases:

Test Case 1:

Input: Start ThreadA and ThreadB sequentially.
Expected Output: ThreadB should wait until ThreadA completes its execution, and then continue.
Explanation: join() makes ThreadB wait until ThreadA finishes.
Test Case 2:

Input: Start ThreadB without calling join() on ThreadA.
Expected Output: Both threads may run concurrently, depending on the scheduler.
Explanation: Without join(), ThreadB does not wait for ThreadA.

-----------------------------------------------------------------------------------------------------

Question 3: Thread Priority and yield() Method
Scenario:
You need to understand how thread priority affects execution and how the yield() method works.

Task:

Create three classes HighPriorityThread, LowPriorityThread, and NormalPriorityThread, all extending Thread.
Set their priorities using setPriority(Thread.MAX_PRIORITY), setPriority(Thread.MIN_PRIORITY), and setPriority(Thread.NORM_PRIORITY) respectively.
In each thread’s run() method, print the thread name and current priority.
In the main method, start all three threads and observe the output.
Add a yield() statement in the run() method of NormalPriorityThread to observe its effect.
Key Concepts:

Understanding thread priorities and how they influence scheduling.
Learning how yield() temporarily pauses the current thread to allow others to execute.
Test Cases:

Test Case 1:

Input: Start HighPriorityThread, LowPriorityThread, and NormalPriorityThread.
Expected Output: The high-priority thread should generally run before the others, but exact behavior may vary due to the scheduler.
Test Case 2:

Input: Use yield() in the run() method of NormalPriorityThread.
Expected Output: The normal priority thread yields control, allowing other threads to execute.
