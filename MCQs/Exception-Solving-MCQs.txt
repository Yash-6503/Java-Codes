MCQ Questions based on Exception-Handling solving.
--------------------------------------------------------------

1.What is the output of the following program
public class ExceptionHandling 
{
	static void nit(int marks) 
	{
		if(marks<0||marks>50)
		{
			throw new IllegalArgumentException(Integer.toString(marks));
		}
	}
	public static void main(String[] args) {
		nit(55);
	}
}

Output:
Exception in thread "main" java.lang.IllegalArgumentException: 55

----------------------------------------------------------------------------------------------------------

2.What is the output of the following program
class InvalidPassword extends Exception
{
	InvalidPassword(String str) {
		super(str);
	}
}

public class ExceptionHandling 
{
	static void nit(String password) throws InvalidPassword
	{
		if(password.length()<5)
			throw new InvalidPassword("Invalid Password");
		else 
		{
			System.out.println("Valid Password");
		}
	}
	public static void main(String[] args) {
		try {
			nit("NareshIT");
		} catch (InvalidPassword e) {
			System.out.println("Exception "+e);
		}
		
	}
}

Output
Valid Password
------------------------------------------------------------------------------------------------------

3.What is the output of the following program
public class ExceptionHandling {
	public static void main (String[] args) {
		int a=20;
		for(int i=0;i<a;i++)
		   try{
		     System.out.println(a/i);  
		   }
	}
}

Output:
try must be catched.
try without catch or finally or resource decelarations is not allowed
-------------------------------------------------------------------------------------------------------

4.What is the output of the following program
class Age extends Exception     //checked exception
{
	Age(String str) {
		super(str);
	}
}
public class ExceptionHandling 
{
	static void nit(int age) throws Age
	{
		if(age<18)
			throw new Age("Not for Vote");
		else 
		{
			System.out.println("Vote");
		}
	}
	public static void main(String[] args) {
		try {
			nit(15);
		} catch (Age e) {
			System.out.println("Exception "+e);
		}		
	}
}

Output:
Exception Age: Not for vote.
--------------------------------------------------------------------------------------------------------

5.What is the output of the following program
class Age extends Exception
{
	
}

public class ExceptionHandling 
{
	public static void main(String[] args) {
		try {
			throw new Age();
		} catch (Age e) {
			System.out.println("Exception "+e.getMessage());
		}
		
	}
}

Output: 
Exception null
----------------------------------------------------------------------------------------------------------

6.What is the output of the following program
class Age extends Exception
{
	Age(String str) {
		super(str);
	}
}
public class ExceptionHandling 
{
	static void nit(int age) throws Age
	{
		if(age<18)
			throw new Age("Not for Vote");
		else 
		{
			System.out.println("Vote");
		}
	}
	public static void main(String[] args) {
		try {
			nit(19);
		} catch (Age e) {
			System.out.println("Exception "+e);
		}finally {
			System.out.println("Vote count");
		}
	}
}

Output:
Vote
Vote count

----------------------------------------------------------------------------------------------------------

7.What is the output of the following program
class Student{    
    //here method can't override because a super method contains RuntimeException and sub method contains CheckedException 
    //to overide Exception types must be same or atleast one type of RuntimeException only contained by any of method
	void message() throws ArithmeticException {  //line 1
		System.out.println("Hai Student");  
	}    
}    
class Faculty extends Student{    
	void message()throws Exception {  // line 2
		System.out.println("hai faculty");  
		}
}
public class ExceptionHandling 
{
	public static void main(String args[]) {    
	   Student nit = new Faculty();    
	     
	   try {    
	   nit.message();    
	   }  
	   catch (Exception e){}   
	  
	}    
}     

Output:
error: message() in Faculty cannot override message() in Student
Overriden methods cannot throws an exception

-----------------------------------------------------------------------------------------------------

8.What is the output of the following program
class Student{    
    //here method can't override because a super method  does not contains any CheckedExceptions.
	void message(){  // line 1
		System.out.println("Hai Student");  
		}    
	}    
	    
class Faculty extends Student{    
	void message()throws Exception {  // line 2
		System.out.println("hai faculty");  
	}
}

public class ExceptionHandling 
{
	public static void main(String args[]) {    
	   Student nit = new Faculty();    
	     
	   try {    
	   nit.message();    
	   }  
	   catch (Exception e){}   
	  
	  }    
}

Output:
error: message() in Faculty cannot override message() in Student
Overriden methods cannot throws an Exception

-------------------------------------------------------------------------------------------------------

9.What is the output of the following program
class Student{    
	void message(){  //line 1
		System.out.println("Hai Student");  
	}    
}    
	    
class Faculty extends Student{    
    //here method can override because a method can directly thows Unchecked/RuntimeExceptions.
	void message() throws ArithmeticException {  // line 2
		System.out.println("hai faculty");  
	}
}
public class ExceptionHandling 
{
	public static void main(String args[]) {    
	   Student nit = new Faculty();    
	     
	   try {    
	   nit.message();    
	   }  
	   catch (Exception e){
}   
	 
	  }    
}

Output:
hai faculty

---------------------------------------------------------------------------------------------------------

10.What is the output of the following program
class Student{    
    //here method can override because a super method and sub method contains CheckedException i.e same type
    //to overide Exception types must be same or atleast one type of RuntimeException only contained by any of method
	void message() throws Exception{  // line 1
		System.out.println("Hai Student");  
		}    
	}    
class Faculty extends Student{    
	void message()throws Exception {  // line 2
		System.out.println("hai faculty");  
		}
}

public class ExceptionHandling 
{
	public static void main(String args[]) {    
	   Student nit = new Faculty();    
	     
	   try {    
	   nit.message();    
	   }  
	   catch (Exception e){}   
	  
	  }    
}

Output:
hai faculty

----------------------------------------------------------------------------------------------------------

11.What is the output of the following program
class Student{    
    //here sub method will override super method because here only one CheckedException is there in super class
	void message() throws Exception{  // line 1
		System.out.println("Hai Student");  
	}    
}    
	    
class Faculty extends Student{    
	void message() {  // line 2
		System.out.println("hai faculty");  
    }
}

public class ExceptionHandling 
{
	public static void main(String args[]) {    
	   Student nit = new Faculty();    
	     
	   try {    
	   nit.message();    
	   }  
	   catch (Exception e){}   
	  
	  }    
}

Output:
hai faculty

--------------------------------------------------------------------------------------------------------

12.What is the output of the following program
public class ExceptionHandling  {  
    public static void main(String args[])  
    {           
        try {  
            try {  
                try {  
                    int arr[] = { 5,7,89,7,54,22,35,144,587,4,25,33,698,541,2,44,5,74,4 };  
                    System.out.println(arr[35]);  
                } catch (ArithmeticException e) {  
                    System.out.println("Arithmetic exception");  
                }  
            }catch (ArrayIndexOutOfBoundsException ar) {  
                System.out.println(" ArrayIndexOutOfBoundsException ");  
            }  
        }  
        catch (Exception e) {  
            System.out.print("Exception");  
        }  
    }  
}  

Output:
ArrayIndexOutOfBoundsException

--------------------------------------------------------------------------------------------------------

13.What is the output of the following program
public class ExceptionHandling  {
    //if we are throwing an Exception then it muste caught or declare as throws 
	void nit()  
	{
		throw new java.io.IOException();
	}
	public static void main(String[] args) {
		ExceptionHandling nit = new ExceptionHandling();
		nit.nit();
		System.out.println("Executed");
	}
}

Output:
error: unreported exception IOException; must be caught or declared to be thrown

----------------------------------------------------------------------------------------------------------

14.What is the output of the following program
class NIT
{
	static void nit() throws IOException  
	{
		throw new IOException("IOException");
	}
}
public class ExceptionHandling  {
	
	public static void main(String[] args) {
		try {
			NIT.nit();
		} catch (IOException e) {
			System.out.println("Exception in catch");
		}
		System.out.println("Executed");
	}
}

Output:
cannot find symbol IOException 
because we need to import java.io package.
//if imported the output will be 
Exception in catch 
Executed
----------------------------------------------------------------------------------------------------------

15.What is the output of the following program
class NIT
{
	static void nit() throws IOException  
	{
		throw new IOException("Input Output Exception");
	}
}

//here JVM's default exception handler will handle the exception and it will terminate program execution abnormally.
public class ExceptionHandling  {
	public static void main(String[] args) throws IOException {		
			NIT.nit();
	}
} 

Output:
cannot find symbol IOException 
because we need to import java.io package.
//if imported then
Exception in thread "main" java.io.IOException: Input Output Exception
----------------------------------------------------------------------------------------------------------

16. What is the output of the following program
public class ExceptionHandling {
	static void nit(int a,int b) {
		   System.out.println(10/a); 
		   int[] arr={25,54,22,141,22,141,22,35};
		   System.out.println(arr[b]);
	}
	public static void main (String[] args) {
		try{
			nit(10, 0);
			nit(10, 15);
		    		    
    	}catch(ArithmeticException e){
    		System.out.println("can't divide by zero");
    	}catch(ArrayIndexOutOfBoundsException e){
    		System.out.println("Out of bounds!");
    	}
	}
}


Output:
1
25
1
Out of bounds!

------------------------------------------------------------------------------------------------------

17.What is the output of the following program
public class ExceptionHandling
{
        public static void main(String[] args)
        {
                try
                {
                        Exception arithmetic = new Exception("Exception");
                        arithmetic.initCause(new ArithmeticException("ArithmeticException"));
                        throw arithmetic;
                }
                catch (Exception e)
                {
                        System.out.println(e.getCause());
                }
                try
                {
                        NumberFormatException numberFormat = new NumberFormatException("NumberFormatException");
                        numberFormat.initCause(new NullPointerException("NullPointerException"));
                        throw numberFormat;
                }
                catch(NumberFormatException numberFormat)
                {
                        System.out.println(numberFormat.getCause());
                }
        }
}

Output:
java.lang.ArithmeticException: ArithmeticException
java.lang.NullPointerException: NullPointerException

------------------------------------------------------------------------------------------------------------

18.What is the output of the following program
public class ExceptionHandling
{
	static void nit1() throws ArithmeticException
	{
		System.out.println("nit1");
		throw new ArithmeticException("Throws ArithmeticException nit1");
	}
    static void nit2() throws NullPointerException
    {
    	System.out.println ("nit2");
        throw new NullPointerException ("Throws NullPointerException nit2");
     }
     public static void main(String args[])
     {
    	 try
         {
    		 nit2();
         }
         catch (NullPointerException npe)
         {
        	 System.out.println (npe);
         }
         try
         {
        	 nit1();
         }
         catch(ArithmeticException ae)
         {
        	 System.out.println(ae);
         }
     }
}

Output:
nit2
java.lang.NullPointerException: Throws NullPointerException nit2
nit1
java.lang.ArithmeticException: Throws ArithmeticException nit1

------------------------------------------------------------------------------------------------------------