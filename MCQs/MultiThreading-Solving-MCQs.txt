MCQs based on Multi-Threading in java.
-------------------------------------------------------------------------------

Find out the output of the following Program :

Q1)
class A implements Runnable 
{  
  public void run() 
  {
     System.out.print(Thread.currentThread().getName());
  }  
}  
class B implements Runnable
{  
  public void run() 
  {  
    new A().run();  
    new Thread(new A(),"T2").run();  
    new Thread(new A(),"T3").start();  
   }
}  
public class Test
{  
  public static void main (String[] args) 
  {  
    new Thread(new B(),"T1").start();  
  }
}

Output:
T1T1T3

---------------------------------------------------------------------------------------------------------

Q2)
public class Test extends Thread 
{
static String name = "ravi";

public static void main(String args[]) 
{
Test t = new Test();
t.Test(name);
System.out.print(" " + name);
}

public void Test(String name) {
start();
System.out.print(" method");
}

public void run() {
System.out.print(" run");
}
}

Output:
method ravi run

-----------------------------------------------------------------------------------------

Q3)

class Job extends Thread 
{
    private Integer number = 0;
    public void run() 
    {
        for (int i = 1; i < 1000000; i++) 
	{
            number++;
        }
    }
    public Integer getNumber() 
    {
        return number;
    }
}
public class Test {
    public static void main(String[] args) {
        Job thread = new Job();
        thread.start();
		try
		{
			thread.join();
		}
		catch (Exception e)
		{
		}
        System.out.println(thread.getNumber());
    }
}

Output
999999

------------------------------------------------------------------------------------

Q4)
class MyData extends Thread
{
private boolean request;
private String  data;
public void run()
	{
		storeMessage("Hello");
		String str=retrieveMessage();
		System.out.println(str);
	}
public synchronized void storeMessage(String data) 
  {
      request = true;
      this.data = data;
  }

  public synchronized String retrieveMessage() 
  {
    request = false;
    return data+" : "+request;
  }
 }
public class Test
{
	public static void main(String[] args) 
	{
		MyData md = new MyData();
		md.start();
        	
		
	}
}

Output:
Hello : false

-----------------------------------------------------------------------------------------------

Q5)
public class Test extends Thread {

    public static void main(String[] args) throws Exception {
    Test t = new Test();
    t.start();
    t.method();
    }

    public void run() {
    System.out.println("run");
    }

    public void method() {
	hello();
    System.out.println("method");
}

public void hello()
	{
	hello1();
	System.out.println("PR");
	}

	public void hello1()
	{
	
	System.out.println("RR");
	}
}

Output:
RR
PR
method
run

-----------------------------------------------------------------------------------

Q6)
class Test 
{
	public static void main(String[] args) 
	{
		Runnable r = new Runnable() {
 public void run() {
 System.out.print("Cat");
 }
 };
 Thread t = new Thread(r) {
 public void run() {
 System.out.print("Dog");
 }
 };
 t.start();
		
	}
}

Output:
Dog

--------------------------------------------------------------------------------------------

Q7)

class MyThread extends Thread
{
	public void run()
	{
		System.out.println("MyThread: run()");
	}

	public void start()
	{
		System.out.println("MyThread: start()");
	}
}

class MyRunnable implements Runnable
{
	public void run()
	{
		System.out.println("MyRunnable: run()");
	}

	public void start()
	{
		System.out.println("MyRunnable: start()");
	}
}

public class Test 
{
	public static void main(String args[])
	{
		MyThread myThread  =  new MyThread();
		MyRunnable myRunnable = new MyRunnable();
		Thread thread  =  new Thread(myRunnable);
		myThread.start();
		thread.start();
	}
}

Output:
MyThread: start()
MyRunnable: run()

-------------------------------------------------------------------------------------------

Q8)
class MyThread extends Thread
{
	String myName;

	MyThread(String name)
	{
		myName = name;
	}

	public void run()
	{
		for(int i=0; i<10;i++)
		{
			System.out.println(myName);
		}
	}
}
public class Test
{
	public static void main(String args[])
	{
		try
		{
			MyThread mt1 = new MyThread("mt1");
			MyThread mt2 = new MyThread("mt2");
			mt1.start();
			mt1.join();
			mt2.start();
		}
		catch(InterruptedException ex)
		{
		}
	}
}

Output:
mt1
mt1
mt1
mt1
mt1
mt1
mt1
mt1
mt1
mt1
mt2
mt2
mt2
mt2
mt2
mt2
mt2
mt2
mt2
mt2

--------------------------------------------------------------------------------------------

Q9)
class MyThread implements Runnable
{
	String str;
	MyThread(String str)
	{
		this.str=str;
	}
	public void run()
	{
		for(int i=1; i<=10; i++)
		{
			System.out.println(str+ " : "+i);
			try
			{
				Thread.sleep(100);
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}
}
public class Test
{
	public static void main(String [] args)
	{
	MyThread obj1 = new MyThread("Cut the Ticket");
	MyThread obj2 = new MyThread(" Show the Seat");

		Thread t1 = new Thread(obj1);
		Thread t2 = new Thread(obj2);

		t1.start();
		t2.start();

	}
}

Output:
 Show the Seat : 1
Cut the Ticket : 1
Cut the Ticket : 2
 Show the Seat : 2
Cut the Ticket : 3
 Show the Seat : 3
Cut the Ticket : 4
 Show the Seat : 4
Cut the Ticket : 5
 Show the Seat : 5
 Show the Seat : 6
Cut the Ticket : 6
 Show the Seat : 7
Cut the Ticket : 7
Cut the Ticket : 8
 Show the Seat : 8
Cut the Ticket : 9
 Show the Seat : 9
Cut the Ticket : 10
 Show the Seat : 10

-------------------------------------------------------------------------------------------

Q10)
public class Test76 
{
	public static void main(String[] args) 
	{
		new Test76().go();
	}
	public void go() 
	{
		Runnable r = new Runnable()
		{
			public void run() 
			{
				System.out.println("foo");
			}
		};
		Thread t = new Thread(r);
		t.start();
		t.run();
	}
}

Output:
foo
foo

-------------------------------------------------------------------------------------------