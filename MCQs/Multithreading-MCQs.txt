MCQs based on Multithreading Concept.
---------------------------------------------------------

Find the output of the following code
Q1)
class Test extends Thread
{
	public void run()
	{
		for(int i=0; i<=10; i++)
		{
			System.out.println("Hello Welcome here.."+i);
		}
	}
}
class Test1 
{
	public static void main(String[] args) 
	{
		Test t = new Test();
		t.start();
		t.start();
	}
}

Output:
Exception in thread "main" java.lang.IllegalThreadStateException
        at java.base/java.lang.Thread.start(Thread.java:1567)
        at test.main(test.java:17)
Hello Welcome here..0
Hello Welcome here..1
Hello Welcome here..2
Hello Welcome here..3
Hello Welcome here..4
Hello Welcome here..5
Hello Welcome here..6
Hello Welcome here..7
Hello Welcome here..8
Hello Welcome here..9
Hello Welcome here..10

Here, we can 't restart a thread again.

----------------------------------------------------------------------------------------------------------

Q2)
class Test
{
    public static void main(String []args)
    {
        Thread t = Thread.currentThread();
		System.out.println(t);
        System.out.println("Name of thread  : "+t.getName());
		System.out.println("Id of thread  : "+t.getId());

    } 
}

Output:
Thread[#1,main,5,main]
Name of thread  : main
Id of thread  : 1

------------------------------------------------------------------------------------------------

Q3) 
class Test
{
    public static void main(String args[])
	{
        new Thread()
        {
            public void run()
            {
                System.out.println("task one");
            }
        }.start();

        new Thread()
        {
            public void run()
            {
                System.out.println("task two");
            }
        }.start();
    }
}

Output:
task one
task two

----------------------------------------------------------------------------------------------

Q4)
class Test
{
    public static void main(String args[])
    {
        Runnable r1=new Runnable()
        {
            public void run()
            {
                System.out.println("task one");
            }
        };

        Runnable r2=new Runnable()
        {
            public void run()
            {
                System.out.println("task two");
            }
        };

        Thread t1=new Thread(r1);
        Thread t2=new Thread(r2);

        t1.start();
        t2.start();
    }
}

Output:
task one 
task two

-----------------------------------------------------------------------------------------

Q5)
class SimpleThread extends Thread 
{
    public SimpleThread(String str) 
    {
        super(str);
    }
    public void run() 
    {
        for (int i = 0; i < 10; i++) 
        {
            System.out.println(i + " " + getName());
            try 
            {
                sleep((int)(Math.random() * 1000));
            }
            catch (InterruptedException e) {}
        }
        System.out.println("DONE! " + getName());
    }
}
class Test
{
public static void main (String args[]) 
    {
        new SimpleThread("J2EE").start();
        new SimpleThread("J2ME").start();
    }
}

Output:
It will execute threads concurrently
0 J2ME
0 J2EE
1 J2ME
1 J2EE
2 J2ME
2 J2EE
3 J2ME
3 J2EE
4 J2EE
4 J2ME
5 J2EE
5 J2ME
6 J2EE
6 J2ME
7 J2EE
7 J2ME
8 J2EE
8 J2ME
9 J2EE
DONE! J2EE
9 J2ME
DONE! J2ME
-------------------------------------------------------------------------------

Q6)
import java.io.*;
import java.util.*;
class Prime extends Thread
{
	public void run()
	{
		try
		{
			for(int i=1;i<=10;i++)
			{
				if(i==2||i==3||i==5||i==7)
				{
					System.out.println ("Prime No.= "+i);
				}
				Thread.sleep(500);
			}
		}
		catch (Exception e){}
	}
}
class NotPrime extends Thread
{
	public void run()
	{
		try
		{
			for(int i=1;i<=10;i++)
			{
				if(i==4||i==6||i==8||i==9||i==10)
				{
					System.out.println ("Non-Prime No.= "+i);
				}
				Thread.sleep(500);
			}
		}
		catch (Exception e){}
	}
}
class Test
{
	public static void main(String args[])
	{
		new Prime().start();
		new NotPrime().start();
	}
}	

Output:
Prime No.= 2
Prime No.= 3
Non-Prime No.= 4
Prime No.= 5
Non-Prime No.= 6
Prime No.= 7
Non-Prime No.= 8
Non-Prime No.= 9
Non-Prime No.= 10
--------------------------------------------------------------------------------

Q7)
public class Test21 extends Thread
{
	static Thread t;
	public static void main(String [] args)
	{
		try
		{
			t=new Thread(new Test21(),"Ravi");
			t.start();
		}
		catch (Exception e)
		{
			System.out.println(e);
		}
	}
	public void run()
	{
		for(int i=1; i<5; i++)
		{
			try
			{
				System.out.print(Thread.currentThread().getName()+"");
				t.start();
			}
			catch (Exception e)
			{
				System.out.println(" will not botther about but "+e+" happened "+i+" times");
			}
		}
	}
}

Output:
Ravi will not botther about but java.lang.IllegalThreadStateException happened 1 times
Ravi will not botther about but java.lang.IllegalThreadStateException happened 2 times
Ravi will not botther about but java.lang.IllegalThreadStateException happened 3 times
Ravi will not botther about but java.lang.IllegalThreadStateException happened 4 times

Here, In run  method we are restarting  thread again so we are facing IllegalThreadStateException
-------------------------------------------------------------------------------------------------------

Q8)

class Test22 
{
	public static void main(String[] args) 
	{		
		try
		{
			Horse h = new Horse();
			Thread t1= new Thread(h,"MyHorse");
			Thread t2= new Thread(h,"YourHorse");
			new Test22().go(t2);
			t1.start(); t2.start();
		}
		catch (Exception e)
		{
			System.out.println(e);
		}

		void go(Thread t)
		{
			t.start();
		}		
	}
	
}
class Horse implements Runnable
{
	public void run()
	{
		System.out.println(Thread.currentThread().getName()+" ");
	}
}

Output:
Illegal start of an method go  

-----------------------------------------------------------------------------------------------

Q9)

class Test23 
{
	public static void main(String[] args) 
	{
		try
		{
			Horse h = new Horse();
			Thread t1= new Thread(h,"MyHorse");
			Thread t2= new Thread(h,"YourHorse");
			new Test23().go(t2);
			t1.start(); t2.start();
		}
		catch (Exception e)
		{
			System.out.println(e);
		}
	}
	
		void go(Thread t)
		{
			t.start();
		}
	
	
}
class Horse implements Runnable
{
	public void run()
	{
		System.out.println(Thread.currentThread().getName()+" ");
	}
}

Output:
java.lang.IllegalThreadStateException
YourHorse 
MyHorse 

Here, we will get an exception due to restarting of t2 thread and program will
execute the remaining threads concurrently.
----------------------------------------------------------------------------------------------------

Q10)

class Parrot implements Runnable
{
	public void run()
	{
		System.out.println(Thread.currentThread().getName()+" ");
	}
}
class Test26
{
	static Parrot p;

	static { p=new Parrot();}

	{Thread t1= new Thread(p,"Peacock"); t1.start();}

	public static void main(String [] args)
	{
		new Test26();

		new Thread( new Runnable()
		{
			public void run()
			{
				;
			}
		},"Koyal").start();

		new Thread(new Parrot(),"Parrot").start();
	}
	

	{
	  Thread t2 = new Thread(p,"Sparrow");t2.start();
	}

}

Output:
Parrot 
Sparrow
Peacock

-------------------------------------------------------------------------------------------------------

Q11)
class MyThreadA extends Thread
{
	String s;
	public void run(String s) 
	{ 
		this.s=s;
		for (;;) 
		{
			System.out.println("s will be printed :"+s);
		}
	}
}
class MyThreadB extends Thread 
{
	String t;
	public void run(String t) 
	{ 
		this.t=t;
		for (;;) 
		{
			System.out.println("t will be printed :"+t);
		}
	}
}
public class Test31
{
public static void main(String [] args) 
{
  MyThreadA t1 = new MyThreadA();
  MyThreadB t2 = new MyThreadB();
		t1.start();
		t2.start();
		
	}
}

Output:
Here, nothing will be printed because to run a thread after starting then run() method must be executed
but here run method contains parameter. so it will not execute.

---------------------------------------------------------------------------------------------------------------

Q12)
public class Test44 extends Thread
{
	public static void main(String argv[])
	{
		Test44 b = new Test44();
		b.run();
		b.start();
	} 
	public void start()
	{
		for (int i = 0; i < 10; i++)
		{
			System.out.println("Value of i = " + i); 
		}  
	}
}

Output:
Value of i = 0
Value of i = 1
Value of i = 2
Value of i = 3
Value of i = 4
Value of i = 5
Value of i = 6
Value of i = 7
Value of i = 8
Value of i = 9

----------------------------------------------------------------------------------------------------------

Q13)
class Test58 
{
	public static void main(String[] args) 
	{
		
	}
	System.out.println("Hello World!");
}

Output:
Error: Illegal start of statement System.out.println();

---------------------------------------------------------------------------------------------------------

Q14)
class Test61
{
	public static void main(String[] args) 
	{
		Runnable r1 = new Runnable() 
		{
			public void run() 
			{
				try 
				{
					while (true) 
					{
						System.out.println("Hello, world!");
						Thread.sleep(1000);
					}
				} 
				catch (InterruptedException iex) {}
			}
		};

		Runnable r2 = new Runnable() 
		{
			public void run() 
			{
				try
				{
					while (true) 
					{
						System.out.println("Goodbye, " +" Beautiful world!");
						Thread.sleep(2000);
					}
				} 
				catch (InterruptedException iex) {}
			}
		};

		Thread thr1 = new Thread(r1);
		Thread thr2 = new Thread(r2);
		thr1.start();
		thr2.start();
	}
}

Output: Here, loop will be executing infinity by 1 to 2s break
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
--------------------------------------------------------------------------------------------------------

Q15)
class Test4
{
   public static void main(String []argv)
   {
      Thread t = Thread.currentThread();
      System.out.println("Name of current thead : "+t.getName());
      t.setName("First Thread");
      System.out.println("Name of thread after change : "+t.getName());
   } 
}

Output:
Name of current thead : main
Name of thread after change : First Thread

--------------------------------------------------------------------------------------------------------

Q16)
class Test15 extends Thread
{
	public void run()		//To run this method we need to create a main class object then by calling it will execute
	{
		System.out.println("PRINT ME");
	}

	public static void main(String []str)
	{
		try
		{
			for(int i=0;i<9;i++)
			{
				System.out.println(i);
				Thread.sleep(500);
			}
		}
		catch(InterruptedException e)
		{
			System.out.println("thread exception");
		}
		Thread t=new Thread();
		t.start();
	}
}

Output:
0
1
2
3
4
5
6
7
8

-----------------------------------------------------------------------------------------------

Q17)
class Foo implements Runnable
{
	public void run() 
	{
		for(int i=0;i<3;i++)
		System.out.println("Run by..."+Thread.currentThread().getName()+",i Is "+ i);
	}
	public void run(String name)
	{
		System.out.println("This is Second"+name);
	}
}
public class Test18
{
	public static void main(String args [])
	{
		Foo f = new Foo();
		Thread t = new Thread(f);
		try 
		{
			System.out.println("Number Will be printt After 500 MiliSecond..");
			for(int j=0;j<5;j++)
			{
				System.out.println("This is j..."+j);
				t.sleep(500);
			}
		}
		catch(InterruptedException e) 
		{
			System.out.println("InterruptedException.."+ e);
			e.printStackTrace();
		}
	}
}

Output:
Number Will be printt After 500 MiliSecond..
This is j...0
This is j...1
This is j...2
This is j...3
This is j...4

Here, Foo class thread will not execute because it is not started to start then call start method.
------------------------------------------------------------------------------------------------

Q18)
public class Test28 extends Thread
{
	public static void main(String [] args)
	{
		System.out.println(Thread.currentThread().getId()+" ");
		Thread t1 = new Thread(new Test28(),"Rahul");
		Thread t2 = new Thread(new Test28(),"Ravi");
		Thread t3 = new Thread(new Test28(),"Puja");
		t3.start();
		t1.start();
		t2.run();
		t2.start();
	}
	public  void run()
	{
		    for(int i=0; i<2; i++)
			System.out.println(Thread.currentThread().getName()+" I'm :"+i);
			System.out.println("It is end of loop");
	}
}

Output:
1 
main I'm :0
main I'm :1
It is end of loop
Puja I'm :0
Puja I'm :1
It is end of loop
Rahul I'm :0
Rahul I'm :1
It is end of loop
Ravi I'm :0
Ravi I'm :1
It is end of loop
-----------------------------------------------------------------------------------------------

Q19)
class MyThread extends Thread 
{
	public void run() 
	{
		for (int i=0; i < 10; i++) 
		{
			System.out.println("hello world1");
		}
	}
}
public class Test36
{
	public static void main(String [] args) 
	{
		MyThread t1 = new MyThread();
		t1.start();
		try 
		{
			t1.join(); 
		} 
		catch (InterruptedException e) 
		{
			System.out.println("ERROR: Thread was interrupted");
		}       
		System.out.println("Thread is done!");
	}
}

Output:
hello world1
hello world1
hello world1
hello world1
hello world1
hello world1
hello world1
hello world1
hello world1
hello world1
Thread is done!

------------------------------------------------------------------------------------------------

Q20)
public class JoinDemo1 
{
	public static void main(String[] args) throws InterruptedException 
	{
		System.out.println("Main thread started");
		Thread thread = Thread.currentThread();
		String name = thread.getName();
		
		for(int i=1; i<=5; i++)
		{			
			System.out.println(i + " by "+name+ " thread ");
			Thread.sleep(1000);
			thread.join(); 
		}		
		System.out.println("Main thread ended");
	}

}

Output:
Main thread started
1 by main thread 

here, join method is called on main thread now main thread is waiting main thread to complete
this is a deadlock state.

----------------------------------------------------------------------------------------------------