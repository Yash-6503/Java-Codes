Program 01 :
------------
Create a BLC(Business Logic Class) called Bowler. Add below details to the class. 

1. Instance variables:
 name: private-String,
 wickets: private-int,
 matches: private-int,
 balls_bowled: private-int,
 runs_conceded: private-int. 

2. Method - bowlerDetails() : public void

Create a method name called bowlerDetails() that accepts name, wickets, matches, balls_bowled and runs_conceded.

Method name: bowlerDetails 

Return type: void

3. Create below public methods

Method name: computeBowlingAverage
Return type: void

This method should print the bowling average of the bowler by dividing runs_conceded with wickets.

Input:
name = "Sachin",
wickets = 10,
matches = 5,
balls_bowled = 750,
runs_conceded 463.

Output:
Name: Sachin
bowling_avg=46.3
Note: a. If any values are negative print 'Error'.

b. If runs_conceded or balls_bowled are greater than 0 when matches are 0 print 'Error'.

Method name: computeStrikeRate
Return type: void

This method should print the Strike Rate of the bowler by dividing runs_conceded with balls_bowled.

Input:
name = "Sachin",
wickets = 10,
matches = 5,
balls_bowled = 750,
runs_conceded 463.

Output:
Name: Sachin
Strike_rate=0.61733335
Note: a. If any values are negative print 'Error'.

b. If runs_conceded or balls_bowled are greater than 0 when matches are 0 print 'Error'.

Method name: showStatistics
Return type: void

This method should print the details of the batter.
Input:
name = "Sachin",
wickets = 10,
matches = 5,
balls_bowled = 750,
runs_conceded 463.

Output:
Name=Sachin
wickets=10
matches=5

balls_bowled=750
runs_conceded=463

Note: a. If any values are negative print 'Error'.

b. If runs_conceded or balls_bowled are greater than 0 when matches are 0 print 'Error'.

An ELC(Executable Logic Class) Test that contains main method. Use this class to test your code.
-----------------------------------------------------------------------
Program 02 :
------------
Class Batter is given to you. Add below details to the class

1. Instance variables:
name: private -String,
runs: private-int,
matches: private-int,
batting_avg: private-float.

2.  Method batterDetails() : public void

Create a method name called batterDetails() that accepts name, runs, matches.

Method name: batterDetails
Return type: void

3. Create below public methods

Method name: computeBattingAverage
Return type: void

This method should print the batting average of the batter by dividing run with matches.

Input: 

Name: "Sachin"
Runs: 18000
Matches: 463



Output:
Name: Sachin
Batting_Avg: 38.87689

Note: a. If runs or matches values are negative print 'Error'.

b. If runs are greater than 0 when matches are 0 print 'Error'.

Method name: getStatistics
Return type: void
This method should print the details of the batter.

Input: 
Name: "Sachin"
Runs: 18000
Matches: 463

Output:
Name: Sachin
Runs: 18000
Matches: 463


Note: a. If runs or matches values are negative print 'Error'.
b. If runs are greater than 0 when matches are 0 print 'Error'.

Given an ELC(Executable Logic class) class for Testing that contains main method. Use this class to test your code.

